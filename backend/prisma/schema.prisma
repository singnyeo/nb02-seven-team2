generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  description       String
  photoUrl          String
  goalRep           Int
  discordWebhookUrl String
  discordInviteUrl  String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  badge             String[]
  rank              Rank[]
  groupRecommend    GroupRecommend[]
  participants      Participant[]
  owner             User             @relation(fields: [ownerId], references: [id])
  ownerId           Int
  exerciseRecords   ExerciseRecord[]
  groupTag          GroupTag[]
}

model GroupRecommend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([groupId, userId]) // 복합 유니크 제약조건 추가
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  groupTags GroupTag[]
}

model GroupTag {
  id      Int   @id @default(autoincrement())
  groupId Int
  tagId   Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model User {
  id                  Int              @id @default(autoincrement())
  nickname            String           @unique
  password            String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  exerciseRecord      ExerciseRecord[]
  groupRecommend      GroupRecommend[]
  participantedGroups Participant[]
  ownedGroups         Group[]
}

model Participant {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, userId]) // 복합 유니크 제약조건 추가
}

model ExerciseRecord {
  id          Int      @id @default(autoincrement())
  sport       String
  description String
  duration    Int
  distance    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  photo       Photo[]
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int
}

model Rank {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       Int      @unique
  weeklyRanked  Int[] // 0번 부터 기록 많은 유저 id 등록
  monthlyRanked Int[] // 0번 부터 기록 많은 유저 id 등록
}

model Photo {
  id               Int            @id @default(autoincrement())
  url              String
  photoTag         PhotoTag
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  exerciseRecord   ExerciseRecord @relation(fields: [exerciseRecordId], references: [id])
  exerciseRecordId Int
}

enum PhotoTag {
  GROUP
  EXERCISERECORD
}
