// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  nickname         String
  description      String
  password         String
  discodeUrl       String
  discodeInviteUrl String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tag              tag[]
  badge            String[]
  targetCount      Int
  Rank             Rank[]
  User             User[]
  GroupRecommend   GroupRecommend[]
}

model GroupRecommend {
  id Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  group          Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

model User {
  id             Int              @id @default(autoincrement())
  nickname       String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  group          Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  ExerciseRecord ExerciseRecord[]
  groupId        Int
  GroupRecommend GroupRecommend[]
}

model ExerciseRecord {
  id                  Int                   @id @default(autoincrement())
  nickname            String
  sport               String
  description         String
  duration            Int
  distance            Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
}

model Rank {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int           @unique
  WeeklyRanked Int[]        // 0번 부터 기록 많은 유저 id 등록
  MonthlyRanked Int[]       // 0번 부터 기록 많은 유저 id 등록
}

model Photo {
  id        Int      @id
  url       String
  photoTag  PhotoTag
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PhotoTag {
  GROUP
  EXERCISERECOD
}